// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETCLICKEDREADY_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETCLICKEDREADY_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketClickedReady;

struct PacketClickedReady FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_READY_FLAG = 6
  };
  uint32_t id() const { return GetField<uint32_t>(VT_ID, 0); }
  int16_t ready_flag() const { return GetField<int16_t>(VT_READY_FLAG, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<int16_t>(verifier, VT_READY_FLAG) &&
           verifier.EndTable();
  }
};

struct PacketClickedReadyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(PacketClickedReady::VT_ID, id, 0); }
  void add_ready_flag(int16_t ready_flag) { fbb_.AddElement<int16_t>(PacketClickedReady::VT_READY_FLAG, ready_flag, 0); }
  PacketClickedReadyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketClickedReadyBuilder &operator=(const PacketClickedReadyBuilder &);
  flatbuffers::Offset<PacketClickedReady> Finish() {
    auto o = flatbuffers::Offset<PacketClickedReady>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketClickedReady> CreatePacketClickedReady(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0,
   int16_t ready_flag = 0) {
  PacketClickedReadyBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_ready_flag(ready_flag);
  return builder_.Finish();
}

inline const packets::PacketClickedReady *GetPacketClickedReady(const void *buf) { return flatbuffers::GetRoot<packets::PacketClickedReady>(buf); }

inline bool VerifyPacketClickedReadyBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketClickedReady>(); }

inline void FinishPacketClickedReadyBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketClickedReady> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETCLICKEDREADY_PACKETS_H_
