// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETGAMEOVER_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETGAMEOVER_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketGameOver;

struct PacketGameOver FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_TEAM = 6
  };
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  int16_t team() const { return GetField<int16_t>(VT_TEAM, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int16_t>(verifier, VT_TEAM) &&
           verifier.EndTable();
  }
};

struct PacketGameOverBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(PacketGameOver::VT_NAME, name); }
  void add_team(int16_t team) { fbb_.AddElement<int16_t>(PacketGameOver::VT_TEAM, team, 0); }
  PacketGameOverBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketGameOverBuilder &operator=(const PacketGameOverBuilder &);
  flatbuffers::Offset<PacketGameOver> Finish() {
    auto o = flatbuffers::Offset<PacketGameOver>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketGameOver> CreatePacketGameOver(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   int16_t team = 0) {
  PacketGameOverBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_team(team);
  return builder_.Finish();
}

inline const packets::PacketGameOver *GetPacketGameOver(const void *buf) { return flatbuffers::GetRoot<packets::PacketGameOver>(buf); }

inline bool VerifyPacketGameOverBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketGameOver>(); }

inline void FinishPacketGameOverBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketGameOver> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETGAMEOVER_PACKETS_H_
