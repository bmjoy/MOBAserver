// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETCLIENTCLICKEDREADY_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETCLIENTCLICKEDREADY_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketClientClickedReady;

struct PacketClientClickedReady FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SLOT = 4,
    VT_READY_FLAG = 6
  };
  int16_t slot() const { return GetField<int16_t>(VT_SLOT, 0); }
  int16_t ready_flag() const { return GetField<int16_t>(VT_READY_FLAG, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_SLOT) &&
           VerifyField<int16_t>(verifier, VT_READY_FLAG) &&
           verifier.EndTable();
  }
};

struct PacketClientClickedReadyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_slot(int16_t slot) { fbb_.AddElement<int16_t>(PacketClientClickedReady::VT_SLOT, slot, 0); }
  void add_ready_flag(int16_t ready_flag) { fbb_.AddElement<int16_t>(PacketClientClickedReady::VT_READY_FLAG, ready_flag, 0); }
  PacketClientClickedReadyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketClientClickedReadyBuilder &operator=(const PacketClientClickedReadyBuilder &);
  flatbuffers::Offset<PacketClientClickedReady> Finish() {
    auto o = flatbuffers::Offset<PacketClientClickedReady>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketClientClickedReady> CreatePacketClientClickedReady(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t slot = 0,
   int16_t ready_flag = 0) {
  PacketClientClickedReadyBuilder builder_(_fbb);
  builder_.add_ready_flag(ready_flag);
  builder_.add_slot(slot);
  return builder_.Finish();
}

inline const packets::PacketClientClickedReady *GetPacketClientClickedReady(const void *buf) { return flatbuffers::GetRoot<packets::PacketClientClickedReady>(buf); }

inline bool VerifyPacketClientClickedReadyBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketClientClickedReady>(); }

inline void FinishPacketClientClickedReadyBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketClientClickedReady> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETCLIENTCLICKEDREADY_PACKETS_H_
