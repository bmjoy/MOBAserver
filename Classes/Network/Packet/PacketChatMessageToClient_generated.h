// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETCHATMESSAGETOCLIENT_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETCHATMESSAGETOCLIENT_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketChatMessageToClient;

struct PacketChatMessageToClient FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_CHAT_MESSAGE = 6
  };
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  const flatbuffers::String *chat_message() const { return GetPointer<const flatbuffers::String *>(VT_CHAT_MESSAGE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHAT_MESSAGE) &&
           verifier.Verify(chat_message()) &&
           verifier.EndTable();
  }
};

struct PacketChatMessageToClientBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(PacketChatMessageToClient::VT_NAME, name); }
  void add_chat_message(flatbuffers::Offset<flatbuffers::String> chat_message) { fbb_.AddOffset(PacketChatMessageToClient::VT_CHAT_MESSAGE, chat_message); }
  PacketChatMessageToClientBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketChatMessageToClientBuilder &operator=(const PacketChatMessageToClientBuilder &);
  flatbuffers::Offset<PacketChatMessageToClient> Finish() {
    auto o = flatbuffers::Offset<PacketChatMessageToClient>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketChatMessageToClient> CreatePacketChatMessageToClient(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> chat_message = 0) {
  PacketChatMessageToClientBuilder builder_(_fbb);
  builder_.add_chat_message(chat_message);
  builder_.add_name(name);
  return builder_.Finish();
}

inline const packets::PacketChatMessageToClient *GetPacketChatMessageToClient(const void *buf) { return flatbuffers::GetRoot<packets::PacketChatMessageToClient>(buf); }

inline bool VerifyPacketChatMessageToClientBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketChatMessageToClient>(); }

inline void FinishPacketChatMessageToClientBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketChatMessageToClient> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETCHATMESSAGETOCLIENT_PACKETS_H_
