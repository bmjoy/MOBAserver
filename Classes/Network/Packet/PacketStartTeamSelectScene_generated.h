// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETSTARTTEAMSELECTSCENE_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETSTARTTEAMSELECTSCENE_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketStartTeamSelectScene;

struct PacketStartTeamSelectScene FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SLOT_NUMBER = 4,
    VT_CLIENT_NAME = 6
  };
  int16_t slot_number() const { return GetField<int16_t>(VT_SLOT_NUMBER, 0); }
  const flatbuffers::String *client_name() const { return GetPointer<const flatbuffers::String *>(VT_CLIENT_NAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_SLOT_NUMBER) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CLIENT_NAME) &&
           verifier.Verify(client_name()) &&
           verifier.EndTable();
  }
};

struct PacketStartTeamSelectSceneBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_slot_number(int16_t slot_number) { fbb_.AddElement<int16_t>(PacketStartTeamSelectScene::VT_SLOT_NUMBER, slot_number, 0); }
  void add_client_name(flatbuffers::Offset<flatbuffers::String> client_name) { fbb_.AddOffset(PacketStartTeamSelectScene::VT_CLIENT_NAME, client_name); }
  PacketStartTeamSelectSceneBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketStartTeamSelectSceneBuilder &operator=(const PacketStartTeamSelectSceneBuilder &);
  flatbuffers::Offset<PacketStartTeamSelectScene> Finish() {
    auto o = flatbuffers::Offset<PacketStartTeamSelectScene>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketStartTeamSelectScene> CreatePacketStartTeamSelectScene(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t slot_number = 0,
   flatbuffers::Offset<flatbuffers::String> client_name = 0) {
  PacketStartTeamSelectSceneBuilder builder_(_fbb);
  builder_.add_client_name(client_name);
  builder_.add_slot_number(slot_number);
  return builder_.Finish();
}

inline const packets::PacketStartTeamSelectScene *GetPacketStartTeamSelectScene(const void *buf) { return flatbuffers::GetRoot<packets::PacketStartTeamSelectScene>(buf); }

inline bool VerifyPacketStartTeamSelectSceneBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketStartTeamSelectScene>(); }

inline void FinishPacketStartTeamSelectSceneBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketStartTeamSelectScene> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETSTARTTEAMSELECTSCENE_PACKETS_H_
