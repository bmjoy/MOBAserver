// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETCLICK_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETCLICK_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketClick;

enum MouseButton {
  MouseButton_LEFT = 1,
  MouseButton_RIGHT = 2,
  MouseButton_MIN = MouseButton_LEFT,
  MouseButton_MAX = MouseButton_RIGHT
};

inline const char **EnumNamesMouseButton() {
  static const char *names[] = { "LEFT", "RIGHT", nullptr };
  return names;
}

inline const char *EnumNameMouseButton(MouseButton e) { return EnumNamesMouseButton()[static_cast<int>(e) - static_cast<int>(MouseButton_LEFT)]; }

struct PacketClick FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_X = 6,
    VT_Y = 8,
    VT_BUTTON = 10,
    VT_COMMAND = 12,
    VT_CLICKED_ID = 14
  };
  uint32_t id() const { return GetField<uint32_t>(VT_ID, 0); }
  float x() const { return GetField<float>(VT_X, 0); }
  float y() const { return GetField<float>(VT_Y, 0); }
  MouseButton button() const { return static_cast<MouseButton>(GetField<int8_t>(VT_BUTTON, 0)); }
  int16_t command() const { return GetField<int16_t>(VT_COMMAND, 0); }
  uint32_t clicked_id() const { return GetField<uint32_t>(VT_CLICKED_ID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<int8_t>(verifier, VT_BUTTON) &&
           VerifyField<int16_t>(verifier, VT_COMMAND) &&
           VerifyField<uint32_t>(verifier, VT_CLICKED_ID) &&
           verifier.EndTable();
  }
};

struct PacketClickBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(PacketClick::VT_ID, id, 0); }
  void add_x(float x) { fbb_.AddElement<float>(PacketClick::VT_X, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(PacketClick::VT_Y, y, 0); }
  void add_button(MouseButton button) { fbb_.AddElement<int8_t>(PacketClick::VT_BUTTON, static_cast<int8_t>(button), 0); }
  void add_command(int16_t command) { fbb_.AddElement<int16_t>(PacketClick::VT_COMMAND, command, 0); }
  void add_clicked_id(uint32_t clicked_id) { fbb_.AddElement<uint32_t>(PacketClick::VT_CLICKED_ID, clicked_id, 0); }
  PacketClickBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketClickBuilder &operator=(const PacketClickBuilder &);
  flatbuffers::Offset<PacketClick> Finish() {
    auto o = flatbuffers::Offset<PacketClick>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<PacketClick> CreatePacketClick(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0,
   float x = 0,
   float y = 0,
   MouseButton button = static_cast<MouseButton>(0),
   int16_t command = 0,
   uint32_t clicked_id = 0) {
  PacketClickBuilder builder_(_fbb);
  builder_.add_clicked_id(clicked_id);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_id(id);
  builder_.add_command(command);
  builder_.add_button(button);
  return builder_.Finish();
}

inline const packets::PacketClick *GetPacketClick(const void *buf) { return flatbuffers::GetRoot<packets::PacketClick>(buf); }

inline bool VerifyPacketClickBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketClick>(); }

inline void FinishPacketClickBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketClick> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETCLICK_PACKETS_H_
