// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETRENDERSKILL_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETRENDERSKILL_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketRenderSkill;

struct PacketRenderSkill FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_X = 6,
    VT_Y = 8,
    VT_ACTIVATE = 10
  };
  uint32_t id() const { return GetField<uint32_t>(VT_ID, 0); }
  float x() const { return GetField<float>(VT_X, 0); }
  float y() const { return GetField<float>(VT_Y, 0); }
  bool activate() const { return GetField<uint8_t>(VT_ACTIVATE, 0) != 0; }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<uint8_t>(verifier, VT_ACTIVATE) &&
           verifier.EndTable();
  }
};

struct PacketRenderSkillBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(PacketRenderSkill::VT_ID, id, 0); }
  void add_x(float x) { fbb_.AddElement<float>(PacketRenderSkill::VT_X, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(PacketRenderSkill::VT_Y, y, 0); }
  void add_activate(bool activate) { fbb_.AddElement<uint8_t>(PacketRenderSkill::VT_ACTIVATE, static_cast<uint8_t>(activate), 0); }
  PacketRenderSkillBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketRenderSkillBuilder &operator=(const PacketRenderSkillBuilder &);
  flatbuffers::Offset<PacketRenderSkill> Finish() {
    auto o = flatbuffers::Offset<PacketRenderSkill>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<PacketRenderSkill> CreatePacketRenderSkill(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0,
   float x = 0,
   float y = 0,
   bool activate = false) {
  PacketRenderSkillBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_id(id);
  builder_.add_activate(activate);
  return builder_.Finish();
}

inline const packets::PacketRenderSkill *GetPacketRenderSkill(const void *buf) { return flatbuffers::GetRoot<packets::PacketRenderSkill>(buf); }

inline bool VerifyPacketRenderSkillBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketRenderSkill>(); }

inline void FinishPacketRenderSkillBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketRenderSkill> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETRENDERSKILL_PACKETS_H_
