// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETWORLDDATA_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETWORLDDATA_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

#include "PacketCreateCharacter_generated.h"
#include "PacketCreateUserCharacter_generated.h"

namespace packets {

struct PacketCreateCharacter;

}  // namespace packets

namespace packets {

struct PacketCreateUserCharacter;

}  // namespace packets

namespace packets {

struct PacketWorldData;

struct PacketWorldData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARACTERS = 4,
    VT_USER_CHARACTERS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<packets::PacketCreateCharacter>> *characters() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<packets::PacketCreateCharacter>> *>(VT_CHARACTERS); }
  const flatbuffers::Vector<flatbuffers::Offset<packets::PacketCreateUserCharacter>> *user_characters() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<packets::PacketCreateUserCharacter>> *>(VT_USER_CHARACTERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHARACTERS) &&
           verifier.Verify(characters()) &&
           verifier.VerifyVectorOfTables(characters()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_CHARACTERS) &&
           verifier.Verify(user_characters()) &&
           verifier.VerifyVectorOfTables(user_characters()) &&
           verifier.EndTable();
  }
};

struct PacketWorldDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_characters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<packets::PacketCreateCharacter>>> characters) { fbb_.AddOffset(PacketWorldData::VT_CHARACTERS, characters); }
  void add_user_characters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<packets::PacketCreateUserCharacter>>> user_characters) { fbb_.AddOffset(PacketWorldData::VT_USER_CHARACTERS, user_characters); }
  PacketWorldDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketWorldDataBuilder &operator=(const PacketWorldDataBuilder &);
  flatbuffers::Offset<PacketWorldData> Finish() {
    auto o = flatbuffers::Offset<PacketWorldData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketWorldData> CreatePacketWorldData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<packets::PacketCreateCharacter>>> characters = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<packets::PacketCreateUserCharacter>>> user_characters = 0) {
  PacketWorldDataBuilder builder_(_fbb);
  builder_.add_user_characters(user_characters);
  builder_.add_characters(characters);
  return builder_.Finish();
}

inline const packets::PacketWorldData *GetPacketWorldData(const void *buf) { return flatbuffers::GetRoot<packets::PacketWorldData>(buf); }

inline bool VerifyPacketWorldDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketWorldData>(); }

inline void FinishPacketWorldDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketWorldData> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETWORLDDATA_PACKETS_H_
