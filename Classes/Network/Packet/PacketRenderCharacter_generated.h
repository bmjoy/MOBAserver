// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETRENDERCHARACTER_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETRENDERCHARACTER_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketRenderCharacter;

struct PacketRenderCharacter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_X = 6,
    VT_Y = 8,
    VT_FRAME = 10,
    VT_MOTION = 12,
    VT_HP = 14,
    VT_MP = 16,
    VT_DAMAGE = 18,
    VT_MDAMAGE = 20,
    VT_ATTACK_SPEED = 22,
    VT_MOVE_SPEED = 24
  };
  uint32_t id() const { return GetField<uint32_t>(VT_ID, 0); }
  float x() const { return GetField<float>(VT_X, 0); }
  float y() const { return GetField<float>(VT_Y, 0); }
  int16_t frame() const { return GetField<int16_t>(VT_FRAME, 0); }
  const flatbuffers::String *motion() const { return GetPointer<const flatbuffers::String *>(VT_MOTION); }
  int16_t hp() const { return GetField<int16_t>(VT_HP, 0); }
  int16_t mp() const { return GetField<int16_t>(VT_MP, 0); }
  int16_t damage() const { return GetField<int16_t>(VT_DAMAGE, 0); }
  int16_t mdamage() const { return GetField<int16_t>(VT_MDAMAGE, 0); }
  int16_t attack_speed() const { return GetField<int16_t>(VT_ATTACK_SPEED, 0); }
  int16_t move_speed() const { return GetField<int16_t>(VT_MOVE_SPEED, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<int16_t>(verifier, VT_FRAME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MOTION) &&
           verifier.Verify(motion()) &&
           VerifyField<int16_t>(verifier, VT_HP) &&
           VerifyField<int16_t>(verifier, VT_MP) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE) &&
           VerifyField<int16_t>(verifier, VT_MDAMAGE) &&
           VerifyField<int16_t>(verifier, VT_ATTACK_SPEED) &&
           VerifyField<int16_t>(verifier, VT_MOVE_SPEED) &&
           verifier.EndTable();
  }
};

struct PacketRenderCharacterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(PacketRenderCharacter::VT_ID, id, 0); }
  void add_x(float x) { fbb_.AddElement<float>(PacketRenderCharacter::VT_X, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(PacketRenderCharacter::VT_Y, y, 0); }
  void add_frame(int16_t frame) { fbb_.AddElement<int16_t>(PacketRenderCharacter::VT_FRAME, frame, 0); }
  void add_motion(flatbuffers::Offset<flatbuffers::String> motion) { fbb_.AddOffset(PacketRenderCharacter::VT_MOTION, motion); }
  void add_hp(int16_t hp) { fbb_.AddElement<int16_t>(PacketRenderCharacter::VT_HP, hp, 0); }
  void add_mp(int16_t mp) { fbb_.AddElement<int16_t>(PacketRenderCharacter::VT_MP, mp, 0); }
  void add_damage(int16_t damage) { fbb_.AddElement<int16_t>(PacketRenderCharacter::VT_DAMAGE, damage, 0); }
  void add_mdamage(int16_t mdamage) { fbb_.AddElement<int16_t>(PacketRenderCharacter::VT_MDAMAGE, mdamage, 0); }
  void add_attack_speed(int16_t attack_speed) { fbb_.AddElement<int16_t>(PacketRenderCharacter::VT_ATTACK_SPEED, attack_speed, 0); }
  void add_move_speed(int16_t move_speed) { fbb_.AddElement<int16_t>(PacketRenderCharacter::VT_MOVE_SPEED, move_speed, 0); }
  PacketRenderCharacterBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketRenderCharacterBuilder &operator=(const PacketRenderCharacterBuilder &);
  flatbuffers::Offset<PacketRenderCharacter> Finish() {
    auto o = flatbuffers::Offset<PacketRenderCharacter>(fbb_.EndTable(start_, 11));
    return o;
  }
};

inline flatbuffers::Offset<PacketRenderCharacter> CreatePacketRenderCharacter(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0,
   float x = 0,
   float y = 0,
   int16_t frame = 0,
   flatbuffers::Offset<flatbuffers::String> motion = 0,
   int16_t hp = 0,
   int16_t mp = 0,
   int16_t damage = 0,
   int16_t mdamage = 0,
   int16_t attack_speed = 0,
   int16_t move_speed = 0) {
  PacketRenderCharacterBuilder builder_(_fbb);
  builder_.add_motion(motion);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_id(id);
  builder_.add_move_speed(move_speed);
  builder_.add_attack_speed(attack_speed);
  builder_.add_mdamage(mdamage);
  builder_.add_damage(damage);
  builder_.add_mp(mp);
  builder_.add_hp(hp);
  builder_.add_frame(frame);
  return builder_.Finish();
}

inline const packets::PacketRenderCharacter *GetPacketRenderCharacter(const void *buf) { return flatbuffers::GetRoot<packets::PacketRenderCharacter>(buf); }

inline bool VerifyPacketRenderCharacterBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketRenderCharacter>(); }

inline void FinishPacketRenderCharacterBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketRenderCharacter> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETRENDERCHARACTER_PACKETS_H_
