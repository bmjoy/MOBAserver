// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETCLIENTSELECTEDCHARACTER_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETCLIENTSELECTEDCHARACTER_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct PacketClientSelectedCharacter;

struct PacketClientSelectedCharacter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SLOT = 4,
    VT_CNAME = 6
  };
  int16_t slot() const { return GetField<int16_t>(VT_SLOT, 0); }
  const flatbuffers::String *cname() const { return GetPointer<const flatbuffers::String *>(VT_CNAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_SLOT) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CNAME) &&
           verifier.Verify(cname()) &&
           verifier.EndTable();
  }
};

struct PacketClientSelectedCharacterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_slot(int16_t slot) { fbb_.AddElement<int16_t>(PacketClientSelectedCharacter::VT_SLOT, slot, 0); }
  void add_cname(flatbuffers::Offset<flatbuffers::String> cname) { fbb_.AddOffset(PacketClientSelectedCharacter::VT_CNAME, cname); }
  PacketClientSelectedCharacterBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketClientSelectedCharacterBuilder &operator=(const PacketClientSelectedCharacterBuilder &);
  flatbuffers::Offset<PacketClientSelectedCharacter> Finish() {
    auto o = flatbuffers::Offset<PacketClientSelectedCharacter>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketClientSelectedCharacter> CreatePacketClientSelectedCharacter(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t slot = 0,
   flatbuffers::Offset<flatbuffers::String> cname = 0) {
  PacketClientSelectedCharacterBuilder builder_(_fbb);
  builder_.add_cname(cname);
  builder_.add_slot(slot);
  return builder_.Finish();
}

inline const packets::PacketClientSelectedCharacter *GetPacketClientSelectedCharacter(const void *buf) { return flatbuffers::GetRoot<packets::PacketClientSelectedCharacter>(buf); }

inline bool VerifyPacketClientSelectedCharacterBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<packets::PacketClientSelectedCharacter>(); }

inline void FinishPacketClientSelectedCharacterBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<packets::PacketClientSelectedCharacter> root) { fbb.Finish(root); }

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_PACKETCLIENTSELECTEDCHARACTER_PACKETS_H_
